<?php

namespace BasicExcel\Writer;

class Xls extends \BasicExcel\AbstractWriter {
    /**
     * MicrosoftXML Header for Excel
     * @var string
     */

    const sHeader = "<?xml version=\"1.0\" encoding=\"%s\"?\>\n<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">";

    /**
     * MicrosoftXML Footer for Excel
     * @var string
     */
    const sFooter = "</Workbook>";

    /**
     * Worksheet & Data
     * @var array
     */
    private $aWorksheetData;

    /**
     * Output string
     * @var string
     */
    private $sOutput;
    private $columnFormats = array();

    /**
     * Encoding to be used
     * @var string
     */
    private $sEncoding;
    private $doc_prop = array(
        'Author' => 'BasicExcel',
        'Company' => 'OmniHost.co.nz',
        'Keywords' => '',
        'Version' => '1.0.0',
        'Title' => '',
        'Subject' => '',
        'Comments' => ''
    );

    /**
     * Constructor
     *
     * Instanciates the class allowing a user-defined encoding.
     *
     * @param string $sEncoding Charset encoding to be used
     */
    public function __construct($sEncoding = 'UTF-8') {
        $this->sEncoding = $sEncoding;
        $this->sOutput = '';
    }

    public function setProp($prop, $value) {
        if (isset($this->doc_prop[$prop])) {
            $this->doc_prop[$prop] = $value;
        }
        return $this;
    }

    public function setProps($props) {
        foreach ($props as $k => $v) {
            $this->setProp($k, $v);
        }
        return $this;
    }

    /**
     * Add a worksheet
     *
     * Creates a new worksheet and adds the given data to it.
     * @param string $title Title of worksheet
     * @param array $data 2-dimensional array of data
     */
    public function addWorksheet($title, $data) {
        $this->aWorksheetData[] = array(
            'title' => $this->getWorksheetTitle($title),
            'data' => $data
        );
        return $this;
    }

    protected function headers($filename) {
        if (preg_match('/\.xls$/', $filename)) {
            header("Content-Type: application/vnd.ms-excel; charset=" . $this->sEncoding);
            header("Content-Disposition: inline; filename=\"" . $filename . "\"");
        } else {
            header("Content-Type: application/xml; charset=" . $this->sEncoding);
            header("Content-Disposition: attachment; filename=\"" . $filename . "\"");
        }
        echo $this->sOutput;
    }

    protected function write($filename) {
        if (!preg_match('/\.(xml|xls|xlsx)$/', $filename)) {
            throw new \BasicExcel\Exception('Filename mimetype must be .xml or .xls');
        }
        $filename = $this->filename($filename);
        $this->generateWorkbook();

        if (@fwrite($this->handle, $this->sOutput) === false) {
            throw new \BasicExcel\Exception(sprintf("Error writing to file %s", $filename));
        }

        if (!fclose($this->handle)) {
            throw new \BasicExcel\Exception("Could not close handle");
        }
    }

    public function fromArray($array, $sheetName = 'sheet 1') {

        $c = current($array);
        if (is_array($c)) {
            foreach ($array as $key => $row) {
                if (is_numeric($key)) {
                    $key = 'Sheet ' . ($key + 1);
                }
                $this->addWorksheet($key, $row);
            }
        } else {
            $this->addWorksheet($sheetName, $array);
        }
        return $this;
    }

    /**
     * Get workbook output
     *
     * Just returns the generated workbook content.
     *
     * @return string Output generated by the class
     */
    public function getWorkbook() {
        $this->generateWorkbook();
        return $this->sOutput;
    }

    /**
     * Worksheet title correction
     *
     * Corrects the worksheet title (given by the user) by the allowed
     * characters by Excel.
     *
     * @param string $title Desired worksheet title
     * @return string Corrected worksheet title
     */
    private function getWorksheetTitle($title) {
        $title = preg_replace("/[\\\|:|\/|\?|\*|\[|\]]/", "", $title);
        return substr($title, 0, 31);
    }

    /**
     * Generate the workbook
     *
     * This is the main wrapper to generate the workbook.
     * It will invoke the creation of worksheets, rows and
     * columns.
     */
    private function generateWorkbook() {
        $this->sOutput .= stripslashes(sprintf(self::sHeader, $this->sEncoding)) . "\n";
        $this->sOutput .= '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">';
        $this->sOutput .= '
            <Generator><![CDATA[BasicExcel by Omnihost - http://www.omnihost.co.nz - https://github.com/phpsa/BasicExcel]]></Generator>';

        foreach ($this->doc_prop as $propname => $propval) {
            $this->sOutput .= '
      <' . $propname . '>' . $propval . '</' . $propname . '>';
        }
        $this->sOutput .= '
            <Created>' . gmdate("Y-m-d\TH:i:s\Z") . '</Created>';

        $this->sOutput .= '</DocumentProperties>';
        foreach ($this->aWorksheetData as $item):
            $this->generateWorksheet($item);
        endforeach;
        $this->sOutput .= self::sFooter;
    }

    /**
     * Generate the Worksheet
     *
     * The second wrapper generates the worksheet. When the worksheet
     * data seems to be more than the excel allowed maximum lines, the
     * array is sliced.
     *
     * @param array $item Worksheet data
     * @todo Add a security check to testify whether this is an array
     */
    private function generateWorksheet($item) {
        $this->sOutput .= sprintf("<Worksheet ss:Name=\"%s\">\n    <Table>\n", $item['title']);
        if (count($item['data']))
            $item['data'] = array_slice($item['data'], 0, 65536);
        foreach ($item['data'] as $k => $v):
            $this->generateRow($v);
        endforeach;
        $this->sOutput .= "    </Table>\n</Worksheet>\n";
    }

    /**
     * Generate the single row
     * @param array Item with row data
     */
    private function generateRow($item) {
        $this->sOutput .= "        <Row>\n";
        foreach ($item as $k => $v):
            $this->generateCell($v);
        endforeach;
        $this->sOutput .= "        </Row>\n";
    }

    /**
     * Generate the single cell
     * @param string $item Cell data
     */
    private function generateCell($item, $type = 'String') {

        if (is_numeric($item)):
            $type = 'Number';
            if ($item{0} == '0' && strlen($item) > 1 && $item{1} != '.'):
                $type = 'String';
            endif;
        endif;
        $item = str_replace('&#039;', '&apos;', htmlspecialchars($item, ENT_QUOTES));
        $this->sOutput .= sprintf("            <Cell><Data ss:Type=\"%s\">%s</Data></Cell>\n", $type, $item);
    }

    /**
     * Deconstructor
     * Resets the main variables/objects
     */
    public function __destruct() {
        unset($this->aWorksheetData);
        unset($this->sOutput);
    }

}